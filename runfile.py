# -*- coding: utf-8 -*-
"""NewFl.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cA5FB8mmbxAsLFdLNiJjH6q4NiEf2hTp
"""

img_path = '/content/images/gettyimages-154918294-612x612.jpg'

import numpy as np 
import pandas as pd
import os
import pickle
from tensorflow.keras.preprocessing.image import load_img
from keras.callbacks import ReduceLROnPlateau
from keras.layers import Flatten, Dense, BatchNormalization, Activation, Dropout
from keras.layers import Lambda, Input , GlobalAveragePooling2D , BatchNormalization
from keras.utils import to_categorical
from tensorflow.keras.models import Model

labels = pd.read_csv('/content/labels.csv')
classes  = sorted(list(set(labels['breed'])))
n_classes = len(classes)

class_to_num = dict(zip(classes , range(n_classes)))

pickled_model = pickle.load(open('model1.pkl', 'rb'))

img_size = (250,250,3)
path = '/content/images/download.jpeg'
Image = (path)
img_g = load_img(path,target_size = img_size)
img_g = np.expand_dims(img_g,axis=0)

def get_features(mode_name , model_preprocessor , input_size , data):
  input_layer = Input(input_size)
  preprocessor = Lambda(model_preprocessor)(input_layer)
  base_model = mode_name(weights = 'imagenet' , include_top = False , input_shape = input_size)(preprocessor)
  avg  = GlobalAveragePooling2D()(base_model)
  feature_extractor = Model(inputs = input_layer , outputs = avg)

  # Extract feature
  feature_maps = feature_extractor.predict(data,verbose = 1)
  # print('Feature maps shape : ',feature_maps.shape)
  return feature_maps

  from tqdm import tqdm
from __future__ import annotations
def images_to_array_test(test_path, img_size = (250,250,3)):
  test_filenames = [test_path+fname for fname in os.listdir(test_path)]

  data_size = len(test_filenames)
  images = np.zeros([data_size , img_size[0] , img_size[1],3],dtype = np.uint8)

  for ix,img_dir in enumerate(tqdm(test_filenames)):
    img = load_img(img_dir, target_size = img_size)
    images[ix] = img
    del img
  # print('Output Datasize : ',images.shape)
  return images


img = load_img(img_path, target_size = img_size)
images = np.zeros([1 , img_size[0] , img_size[1],3],dtype = np.uint8)
images[0] = img
# images.shape

from keras.applications.inception_v3 import InceptionV3 , preprocess_input
inception_preprocessor = preprocess_input
from keras.applications.nasnet import NASNetLarge , preprocess_input
nasnet_preprocessor = preprocess_input
from keras.applications.inception_resnet_v2 import InceptionResNetV2 , preprocess_input
inc_resnet_preprocessor = preprocess_input
from keras.applications.xception import Xception, preprocess_input
xception_preprocessor =  preprocess_input

def extract_features(data):
  inception_features = get_features(InceptionV3 , inception_preprocessor , img_size , data)
  xception_features = get_features(Xception,xception_preprocessor , img_size , data)
  nasnet_features = get_features(NASNetLarge,nasnet_preprocessor , img_size , data)
  inc_resnet_features = get_features(InceptionResNetV2 , inc_resnet_preprocessor , img_size , data)

  final_features = np.concatenate([inception_features , xception_features , nasnet_features , inc_resnet_features],axis = -1)

  # print('Final feature maps shape' , final_features.shape)

  return final_features

test_features = extract_features(images)

predg = pickled_model.predict(test_features)

print(f"{classes[np.argmax(predg[0])]}")